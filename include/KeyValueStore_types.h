/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef KeyValueStore_TYPES_H
#define KeyValueStore_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace KeyValueStore {

struct KVStoreStatus {
  enum type {
    OK = 1,
    EKEYNOTFOUND = 2,
    EITEMNOTFOUND = 3,
    EPUTFAILED = 4,
    EITEMEXISTS = 5,
    INTERNAL_FAILURE = 6,
    NOT_IMPLEMENTED = 7
  };
};

extern const std::map<int, const char*> _KVStoreStatus_VALUES_TO_NAMES;

typedef struct _GetResponse__isset {
  _GetResponse__isset() : status(false), value(false), timestamp(false) {}
  bool status;
  bool value;
  bool timestamp;
} _GetResponse__isset;

class GetResponse {
 public:

  static const char* ascii_fingerprint; // = "EC9673EEAE3E5A373D15AC0EC614F2A0";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0x96,0x73,0xEE,0xAE,0x3E,0x5A,0x37,0x3D,0x15,0xAC,0x0E,0xC6,0x14,0xF2,0xA0};

  GetResponse() : status((KVStoreStatus::type)0), value() {
  }

  virtual ~GetResponse() throw() {}

  KVStoreStatus::type status;
  std::string value;
  std::vector<int64_t>  timestamp;

  _GetResponse__isset __isset;

  void __set_status(const KVStoreStatus::type val) {
    status = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_timestamp(const std::vector<int64_t> & val) {
    timestamp = val;
  }

  bool operator == (const GetResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const GetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetResponse &a, GetResponse &b);

typedef struct _GetListResponse__isset {
  _GetListResponse__isset() : status(false), values(false), timestamp(false) {}
  bool status;
  bool values;
  bool timestamp;
} _GetListResponse__isset;

class GetListResponse {
 public:

  static const char* ascii_fingerprint; // = "2A650EF49BC6B403F8FC4B08B46503CF";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x65,0x0E,0xF4,0x9B,0xC6,0xB4,0x03,0xF8,0xFC,0x4B,0x08,0xB4,0x65,0x03,0xCF};

  GetListResponse() : status((KVStoreStatus::type)0) {
  }

  virtual ~GetListResponse() throw() {}

  KVStoreStatus::type status;
  std::vector<std::string>  values;
  std::vector<int64_t>  timestamp;

  _GetListResponse__isset __isset;

  void __set_status(const KVStoreStatus::type val) {
    status = val;
  }

  void __set_values(const std::vector<std::string> & val) {
    values = val;
  }

  void __set_timestamp(const std::vector<int64_t> & val) {
    timestamp = val;
  }

  bool operator == (const GetListResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const GetListResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetListResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetListResponse &a, GetListResponse &b);

} // namespace

#endif
